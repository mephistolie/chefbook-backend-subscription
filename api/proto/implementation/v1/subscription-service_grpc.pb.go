// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: v1/subscription-service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SubscriptionService_GetProfileSubscriptions_FullMethodName       = "/v1.SubscriptionService/GetProfileSubscriptions"
	SubscriptionService_GetProfileCurrentSubscription_FullMethodName = "/v1.SubscriptionService/GetProfileCurrentSubscription"
	SubscriptionService_ConfirmGoogleSubscription_FullMethodName     = "/v1.SubscriptionService/ConfirmGoogleSubscription"
)

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	GetProfileSubscriptions(ctx context.Context, in *GetProfileSubscriptionsRequest, opts ...grpc.CallOption) (*GetProfileSubscriptionsResponse, error)
	GetProfileCurrentSubscription(ctx context.Context, in *GetProfileCurrentSubscriptionRequest, opts ...grpc.CallOption) (*GetProfileCurrentSubscriptionResponse, error)
	ConfirmGoogleSubscription(ctx context.Context, in *ConfirmGoogleSubscriptionRequest, opts ...grpc.CallOption) (*ConfirmGoogleSubscriptionResponse, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) GetProfileSubscriptions(ctx context.Context, in *GetProfileSubscriptionsRequest, opts ...grpc.CallOption) (*GetProfileSubscriptionsResponse, error) {
	out := new(GetProfileSubscriptionsResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_GetProfileSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetProfileCurrentSubscription(ctx context.Context, in *GetProfileCurrentSubscriptionRequest, opts ...grpc.CallOption) (*GetProfileCurrentSubscriptionResponse, error) {
	out := new(GetProfileCurrentSubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_GetProfileCurrentSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) ConfirmGoogleSubscription(ctx context.Context, in *ConfirmGoogleSubscriptionRequest, opts ...grpc.CallOption) (*ConfirmGoogleSubscriptionResponse, error) {
	out := new(ConfirmGoogleSubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_ConfirmGoogleSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility
type SubscriptionServiceServer interface {
	GetProfileSubscriptions(context.Context, *GetProfileSubscriptionsRequest) (*GetProfileSubscriptionsResponse, error)
	GetProfileCurrentSubscription(context.Context, *GetProfileCurrentSubscriptionRequest) (*GetProfileCurrentSubscriptionResponse, error)
	ConfirmGoogleSubscription(context.Context, *ConfirmGoogleSubscriptionRequest) (*ConfirmGoogleSubscriptionResponse, error)
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServiceServer struct {
}

func (UnimplementedSubscriptionServiceServer) GetProfileSubscriptions(context.Context, *GetProfileSubscriptionsRequest) (*GetProfileSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileSubscriptions not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetProfileCurrentSubscription(context.Context, *GetProfileCurrentSubscriptionRequest) (*GetProfileCurrentSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileCurrentSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) ConfirmGoogleSubscription(context.Context, *ConfirmGoogleSubscriptionRequest) (*ConfirmGoogleSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmGoogleSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_GetProfileSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetProfileSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_GetProfileSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetProfileSubscriptions(ctx, req.(*GetProfileSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetProfileCurrentSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileCurrentSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetProfileCurrentSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_GetProfileCurrentSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetProfileCurrentSubscription(ctx, req.(*GetProfileCurrentSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_ConfirmGoogleSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmGoogleSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).ConfirmGoogleSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_ConfirmGoogleSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).ConfirmGoogleSubscription(ctx, req.(*ConfirmGoogleSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfileSubscriptions",
			Handler:    _SubscriptionService_GetProfileSubscriptions_Handler,
		},
		{
			MethodName: "GetProfileCurrentSubscription",
			Handler:    _SubscriptionService_GetProfileCurrentSubscription_Handler,
		},
		{
			MethodName: "ConfirmGoogleSubscription",
			Handler:    _SubscriptionService_ConfirmGoogleSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/subscription-service.proto",
}
